module Darklang =
  module Stdlib =
    module HttpClient =

      type BadHeader =
        // Occurs whrn a header key is empty. eg. [ ("", "") ]
        | EmptyKey
        | InvalidContentType

      type BadUrlDetails =
        // Occurs when the URI scheme is not allowed. eg. "ftp://darklang.com"
        | UnsupportedProtocol
        // Occurs when the host is not allowed. eg. "http://0"
        | InvalidHost
        // Occurs when the URI does not conform to the format specified by RFC 2396. eg. "{ ] nonsense ^#( :"
        | InvalidUri
        // Occurs when the request contains invalid headers. eg.A request to "http://google.com" with [("Metadata-Flavor", "Google")] header
        | InvalidRequest

      type RequestError =
        | BadUrl of BadUrlDetails
        // Occurs when the request is cancelled due to a timeout
        | Timeout
        | BadHeader of BadHeader
        // Occurs when there's an issue connecting to the endpoint or an I/O error. eg. network error, DNS failure, certifivate validation error, etc.
        | NetworkError
        // Occurs when the request method is not invalid.
        | BadMethod

      let toString (e: RequestError) : String =
        match e with
        | BadUrl details ->
          match details with
          | UnsupportedProtocol -> "Unsupported protocol"
          | InvalidHost -> "Invalid host"
          | InvalidUri -> "Invalid URI"
          | InvalidRequest -> "Invalid request"
        | Timeout -> "Timeout"
        | BadHeader details ->
          match details with
          | EmptyKey -> "Empty key"
          | InvalidContentType -> "Invalid content-type header"
        | NetworkError -> "NetworkError"
        | BadMethod -> "BadMethod"


      /// The response from a HTTP request
      type Response =
        { statusCode: Int
          headers: List<String * String>
          body: Bytes }


      /// Make blocking HTTP call to <param uri>. Returns a <type Result> where
      /// the response is wrapped in {{ Ok }} if a response was successfully
      /// received and parsed, and is wrapped in {{ Error }} otherwise
      let request
        (method: String)
        (uri: String)
        (headers: List<String * String>)
        (body: Bytes)
        : PACKAGE.Darklang.Stdlib.Result.Result<PACKAGE.Darklang.Stdlib.HttpClient.Response, PACKAGE.Darklang.Stdlib.HttpClient.RequestError> =
        Builtin.HttpClient.request method uri headers body


      let get
        (uri: String)
        : PACKAGE.Darklang.Stdlib.Result.Result<PACKAGE.Darklang.Stdlib.HttpClient.Response, PACKAGE.Darklang.Stdlib.HttpClient.RequestError> =
        PACKAGE.Darklang.Stdlib.HttpClient.request "GET" uri [] Builtin.Bytes.empty


      let post
        (uri: String)
        (headers: List<String * String>)
        (body: Bytes)
        : PACKAGE.Darklang.Stdlib.Result.Result<PACKAGE.Darklang.Stdlib.HttpClient.Response, PACKAGE.Darklang.Stdlib.HttpClient.RequestError> =
        PACKAGE.Darklang.Stdlib.HttpClient.request "POST" uri headers body


      let put
        (uri: String)
        (headers: List<String * String>)
        (body: Bytes)
        : PACKAGE.Darklang.Stdlib.Result.Result<PACKAGE.Darklang.Stdlib.HttpClient.Response, PACKAGE.Darklang.Stdlib.HttpClient.RequestError> =
        PACKAGE.Darklang.Stdlib.HttpClient.request "PUT" uri headers body


      let options
        (uri: String)
        : PACKAGE.Darklang.Stdlib.Result.Result<PACKAGE.Darklang.Stdlib.HttpClient.Response, PACKAGE.Darklang.Stdlib.HttpClient.RequestError> =
        PACKAGE.Darklang.Stdlib.HttpClient.request
          "OPTIONS"
          uri
          []
          Builtin.Bytes.empty


      let delete
        (uri: String)
        : PACKAGE.Darklang.Stdlib.Result.Result<PACKAGE.Darklang.Stdlib.HttpClient.Response, PACKAGE.Darklang.Stdlib.HttpClient.RequestError> =
        PACKAGE.Darklang.Stdlib.HttpClient.request
          "DELETE"
          uri
          []
          Builtin.Bytes.empty


      let head
        (uri: String)
        : PACKAGE.Darklang.Stdlib.Result.Result<PACKAGE.Darklang.Stdlib.HttpClient.Response, PACKAGE.Darklang.Stdlib.HttpClient.RequestError> =
        PACKAGE.Darklang.Stdlib.HttpClient.request "HEAD" uri [] Builtin.Bytes.empty


      /// Returns a header <type (String*String))> with {{'authorization'}} created using HTTP basic auth
      let basicAuth
        (username: String)
        (password: String)
        : PACKAGE.Darklang.Stdlib.Result.Result<(String * String), String> =
        if PACKAGE.Darklang.Stdlib.String.contains username "-" then
          PACKAGE.Darklang.Stdlib.Result.Result.Error
            "Username cannot contain a hyphen"
        else
          let encoded =
            PACKAGE.Darklang.Stdlib.String.base64Encode $"{username}:{password}"

          PACKAGE.Darklang.Stdlib.Result.Result.Ok(
            ("authorization", $"basic {encoded}")
          )

      /// Returns a header <type (String*String))> with {{'authorization'}} set to <param token>
      let bearerToken (token: String) : (String * String) =
        ("authorization", ("bearer " ++ token))


      module ContentType =
        /// A header <type (String*String))> with {{content-type}} set for HTML form requests or responses
        let form = ("content-type", "application/x-www-form-urlencoded")

        /// A header <type (String*String))> with {{content-type}} set for JSON requests or responses
        let json = ("content-type", "application/json")

        /// A header <type (String*String))> with {{'content-type'}} set for plain text requests or responses
        let plainText = ("content-type", "text/plain; charset=utf-8")

        /// A header <type (String*String))> with {{'content-type'}} set for html requests
        let html = ("content-type", "text/html; charset=utf-8")