module Darklang =
  module LanguageTools =
    module RuntimeErrors =
      module Int =
        type Error =
          | DivideByZeroError
          | OutOfRange
          | NegativeExponent
          | NegativeModulus
          | ZeroModulus

        let toSegments (e: Error) : ErrorOutput =
          match e with
          | DivideByZeroError ->
            ErrorOutput
              { summary = [ ErrorSegment.ErrorSegment.String "Division by zero" ]
                extraExplanation = []
                actual = []
                expected = [] }

          | OutOfRange ->
            ErrorOutput
              { summary = [ ErrorSegment.ErrorSegment.String "Out of range" ]
                extraExplanation = []
                actual = []
                expected = [] }

          | NegativeExponent ->
            ErrorOutput
              { summary = [ ErrorSegment.ErrorSegment.String "Negative exponent" ]
                extraExplanation = []
                actual = []
                expected = [] }

          | NegativeModulus ->
            ErrorOutput
              { summary = [ ErrorSegment.ErrorSegment.String "Negative modulus" ]
                extraExplanation = []
                actual = []
                expected = [] }

          | ZeroModulus ->
            ErrorOutput
              { summary = [ ErrorSegment.ErrorSegment.String "Zero modulus" ]
                extraExplanation = []
                actual = []
                expected = [] }